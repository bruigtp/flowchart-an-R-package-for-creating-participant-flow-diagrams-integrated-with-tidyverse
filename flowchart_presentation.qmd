---
title: "{flowchart}: A Tidy R Package for Data Flowchart Generation"
title-slide-attributes:
  data-background-image: WWW/title.png
  data-background-size: contain
  data-background-opacity: "0.6"
author: 
 - name: "Pau Satorra"
   affiliations: 
    - name: "Biostatistics Support and Research Unit, IGTP" 
 - name: "João Carmezim"
   affiliations: 
    - name: "Biostatistics Support and Research Unit, IGTP" 
 - name: "Natàlia Pallarès"
   affiliations: 
    - name: "Biostatistics Support and Research Unit, IGTP" 
 - name: "Kenneth A. Taylor"
   affiliations: 
    - name: "Komodo Health, University of South Florida"
 - name: "Cristian Tebé"
   affiliations: 
    - name: "Biostatistics Support and Research Unit, IGTP"
date: "2025-04-24"
date-format: long
format: 
  revealjs:
    theme: [blood, WWW/custom.scss]
    embed-resources: true
    code-line-numbers: false
    code-copy: true
    footer: "Douglas Altman Sessions"
    slide-number: false
    logo: WWW/logo.png
execute: 
  echo: true
editor_options: 
  chunk_output_type: console
---

# Index 

**1.** Introduction

**2.** The tidyverse

**3.** The {flowchart} package

**4.** How to create a flowchart?

**5.** Customize a flowchart

**6.** Combine flowcharts

**7.** Export a flowchart

**8.** Hands-on examples

**9.** Conclusions

# Introduction

## Flowcharts

- In any study, a participant flowchart serves as a visual representation of the steps and decisions in the study workflow.

- Usually different decisions are made from the initial cohort of eligible or screened subjects until a final number of these subjects are considered to be included in the analyses.

- It is essential that the steps and numbers are clearly defined and that the process is transparent in order to ensure the reproducibility of the study and the quality of the reporting.

## Flowcharts {auto-animate=true}

- Participant flowcharts evolved from the broader concept of flowcharts introduced by industrial engineers.

- Frank and Lillian Gilbreth introduced the idea of flowcharts in 1921 as "Flow Process Charts" to the American Society of Mechanical Engineers:

## Flowcharts {auto-animate=true}

![](WWW/first_flowchart.png){fig-align="center"}


## Flowcharts in clinical research {auto-animate=true}

- In clinical research, the CONSORT, STROBE and ICH guidelines strongly recommend the use of flowcharts.

- The CONSORT guideline provides a template for the elaboration of a flowchart in the context of a randomized trial of two groups:

## Flowcharts in clinical research {auto-animate=true}

<center>
![](WWW/consort_flowchart.jpg){width="50%"}
</center>

## Flowchart creation

- The creation of these flowcharts is a joint task between the data management team and the statisticians.

- It is time-consuming and labor-intensive, as every screened or recruited subject must be included, without exception.

- Usually this process must be repeated many times until the database is closed for analysis. 

<!-- ## flowchart creation -->

<!-- <center> -->
<!-- ![](WWW/question.jpg) -->
<!-- </center> -->

## flowchart packages

- There are several R packages dedicated to building flowcharts: {Gmisc}, {DiagrammeR}, {consort}, {ggflowchart}.

- Complex programming and manual parameterization are often involved.

- Some are designed for building other kind of diagrams.

- They are not adapted to the tidyverse.

## {Gmisc} package

```{r}
#| output-location: slide

library(Gmisc, quietly = TRUE)
library(glue)
library(htmlTable)
library(grid)
library(magrittr)

org_cohort <- boxGrob(glue("Stockholm population",
                           "n = {pop}",
                           pop = txtInt(1632798),
                           .sep = "\n"))
eligible <- boxGrob(glue("Eligible",
                          "n = {pop}",
                           pop = txtInt(10032),
                           .sep = "\n"))
included <- boxGrob(glue("Randomized",
                         "n = {incl}",
                         incl = txtInt(122),
                         .sep = "\n"))
grp_a <- boxGrob(glue("Treatment A",
                      "n = {recr}",
                      recr = txtInt(43),
                      .sep = "\n"))

grp_b <- boxGrob(glue("Treatment B",
                      "n = {recr}",
                      recr = txtInt(122 - 43 - 30),
                      .sep = "\n"))

excluded <- boxGrob(glue("Excluded (n = {tot}):",
                         " - not interested: {uninterested}",
                         " - contra-indicated: {contra}",
                         tot = 30,
                         uninterested = 12,
                         contra = 30 - 12,
                         .sep = "\n"),
                    just = "left")

grid.newpage()
vert <- spreadVertical(org_cohort,
                       eligible = eligible,
                       included = included,
                       grps = grp_a)
grps <- alignVertical(reference = vert$grps,
                      grp_a, grp_b) %>%
  spreadHorizontal()
vert$grps <- NULL

excluded <- moveBox(excluded,
                    x = .8,
                    y = coords(vert$included)$top + distance(vert$eligible, vert$included, half = TRUE, center = FALSE))

for (i in 1:(length(vert) - 1)) {
  connectGrob(vert[[i]], vert[[i + 1]], type = "vert") %>%
    print
}
connectGrob(vert$included, grps[[1]], type = "N")
connectGrob(vert$included, grps[[2]], type = "N")

connectGrob(vert$eligible, excluded, type = "L")

# Print boxes
vert
grps
excluded
```

# The tidyverse

## The tidyverse

::: {.callout-note appearance="simple"}
A set of R packages ideal for data management. They will make your life a lot easier.
:::

![](WWW/tidyverse_packages.png)

## The tidyverse

- The philosophy of tidyverse is to concatenate basic functions applied to a tibble (dataframe) to accomplish complex manipulations integrated into a tidy workflow.

- The tidyverse workflow is based on the usage of the pipe operator, which can be the native pipe (`|>`) or the magrittr pipe (`%>%`).

## Pipe operator {auto-animate=true}

:::: {.columns}

::: {.column width="30%"}

![](WWW/pipe.png){fig-align="center"}

:::

::: {.column width="70%"}

- The pipe operator allows to concatenate multiple functions applied to the same object:

```{r}
#Round π to 6 decimals
round(pi, 6)
```

:::

::::


## Pipe operator {auto-animate=true}

:::: {.columns}

::: {.column width="30%"}

![](WWW/pipe.png){fig-align="center"}

:::

::: {.column width="70%"}

- The pipe operator allows to concatenate multiple functions applied to the same object:

```{r}
#Equivalent using pipes
pi |> round(6)
```

:::

::::

## Pipe operator {auto-animate=true}

:::: {.columns}

::: {.column width="30%"}

![](WWW/pipe.png){fig-align="center"}

:::

::: {.column width="70%"}

- The pipe operator allows to concatenate multiple functions applied to the same object:

```{r}
#Exponential of the square root of π and then round to 6 decimals
round(exp(sqrt(pi)), 6)
```

:::

::::

## Pipe operator {auto-animate=true}

:::: {.columns}

::: {.column width="30%"}

![](WWW/pipe.png){fig-align="center"}

:::

::: {.column width="70%"}

- The pipe operator allows to concatenate multiple functions applied to the same object:

```{r}
#Equivalent using pipes
pi |> 
  sqrt() |> 
  exp() |> 
  round(6)
```

:::

::::

## The tidyverse {auto-animate=true}

- This is an example of what a tidyverse workflow looks like compared to base R:

<div style = "font-size: 23px;">

```{r}
filter_iris <- subset(iris, Species == "setosa")

sel_filter_iris <- filter_iris[, c("Sepal.Length", "Sepal.Width")]

sel_filter_iris$Sepal.Size <- ifelse(sel_filter_iris$Sepal.Length > mean(sel_filter_iris$Sepal.Length) & sel_filter_iris$Sepal.Width > mean(sel_filter_iris$Sepal.Width), 2, 1)

sel_filter_iris$Sepal.Size <- factor(sel_filter_iris$Sepal.Size, levels = 1:2, labels = c("Small", "Big"))

small_iris <- sel_filter_iris[sel_filter_iris$Sepal.Size == "Small",]

small_sepal_area <- mean(small_iris[,"Sepal.Length"] * small_iris[,"Sepal.Width"])

big_iris <- sel_filter_iris[sel_filter_iris$Sepal.Size == "Big",]

big_sepal_area <- mean(big_iris[,"Sepal.Length"] * big_iris[,"Sepal.Width"])

data.frame(
  "Sepal.Size" = c("Small", "Big"),
  "Sepal.Area" = c(small_sepal_area, big_sepal_area)
)
```

</div>

## The tidyverse {auto-animate=true}

- This is an example of what a tidyverse workflow looks like compared to base R:

<div style = "font-size: 23px;">

```{r}
library(dplyr)

iris |> 
  filter(Species == "setosa") |> 
  select(Sepal.Length, Sepal.Width) |> 
  mutate(
    Sepal.Size = case_when(
      Sepal.Length > mean(Sepal.Length) & Sepal.Width > mean(Sepal.Width) ~ 2,
      .default = 1
    ),
    Sepal.Size = factor(Sepal.Size, levels = 1:2, labels = c("Small", "Big")) 
  ) |> 
  group_by(Sepal.Size) |> 
  summarise(
    Sepal.Area = mean(Sepal.Length*Sepal.Width)
  )
```

</div>
  
# The {flowchart} package

## {flowchart} 

:::: {.columns}

::: {.column width="30%"}

![](WWW/logo.png){fig-align="center"}

:::

::: {.column width="70%"}

- It adapts the {Gmisc} package to the tidyverse and makes it more automatizable.

- From the study database we have to define a set of simple operations combined with the pipe operator (`|>` or `%>%`).

- It automatically adapts to the study database allowing reproducibility.

- These functions are highly customizable allowing manual parameters to be entered if necessary.

:::

::::

## {flowchart}

<center>
![](WWW/alexander_calder.jpg){width="70%"}

Alexander Calder (1898-1976)

</center>

## {flowchart}

- Published in CRAN since Feburary 2024. Current version: `0.8.0`.

<center>
![flowchart CRAN page](WWW/flowchart_CRAN.png){width="90%"}
</center>

## Overview of the package

<br>

::: columns
::: {.column width="50%"}
-   Create a flowchart:

    -   `as_fc()`

    -   `fc_draw()`

    -   `fc_split()`

    -   `fc_filter()`
    
:::

::: {.column width="50%"}
-   Combine flowcharts:

    -   `fc_merge()`

    -   `fc_stack()`

:::
:::

::: columns
::: {.column width="50%"}
-   Customize flowcharts:
    
    -   `fc_modify()`
    
:::

::: {.column width="50%"}
-   Export flowcharts:
    
    -   `fc_export()`

:::
:::

## `safo` dataset

-   It's the built-in dataset of the package.

-   Randomly generated dataset from the SAFO clinical trial[^1].

[^1]: Grillo, S., Pujol, M., Miró, J.M. et al. Cloxacillin plus fosfomycin versus cloxacillin alone for methicillin-susceptible <i>Staphylococcus aureus</i> bacteremia: a randomized trial. Nat Med 29, 2518--2525 (2023)

```{r echo=FALSE}
library(flowchart)
library(tidyverse)
head(safo[, c("id", "inclusion_crit", "exclusion_crit", "decline_part", "group", "itt", "pp")]) |> 
  gt::gt() |> 
  gt::cols_align("center")
```

# How to create a flowchart

## `as_fc()` 

-   Allows to initialize a dataset in the class `fc` created for this package.

-   Creates a flowchart with an initial box showing the total number of rows of the dataset.

```{r echo=TRUE}
library(flowchart)

safo_fc <- safo |> 
  as_fc()
```

## `as_fc()` {auto-animate="true"}

-   Allows to initialize a dataset in the class `fc` created for this package.

-   Creates a flowchart with an initial box showing the total number of rows of the dataset.

```{r echo=TRUE}
library(flowchart)

safo_fc <- safo |> 
  as_fc()

str(safo_fc, max.level = 1)
```


## `as_fc()` {auto-animate="true"}

::: {style="position: absolute; left: 50%; top: 50%;-webkit-transform: translate(-50%, -50%); transform: translate(-50%, -50%);"}

`safo_fc$fc`

```{r echo=FALSE}
safo_fc$fc |> gt::gt()
```

:::

## `fc_draw()`

-   Allows to draw a previously created `fc` object:

```{r echo=TRUE, eval=FALSE}
safo |> 
  as_fc()
```

## `fc_draw()` {auto-animate="true"}

-   Allows to draw a previously created `fc` object:

```{r echo=TRUE, fig.width = 5, fig.height = 2, fig.align = "center"}
safo |> 
  as_fc() |> 
  fc_draw()
```

## `fc_draw()` {auto-animate="true"}

-   Allows to draw a previously created `fc` object:

```{r echo=TRUE, fig.width = 3, fig.height = 2, fig.align = "center"}
#| classes: custom2
safo |> 
  as_fc(label = "Patients assessed for eligibility") |> 
  fc_draw()
```

::: {style="margin-top: -10%;"}

-   We can use the `label` argument to modify the box label.

:::

## `fc_filter()` 

-   We can filter an existing flowchart specifying the logic in which the filter is to be applied:

```{r echo=TRUE, fig.width = 3, fig.height = 2, out.width = "600"}
#| classes: custom2
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |> 
  fc_draw()
```

## `fc_filter()` {auto-animate="true"}

-   We can filter an existing flowchart specifying the logic in which the filter is to be applied:

```{r echo=TRUE, fig.width = 3, fig.height = 3, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group)) |> 
  fc_draw()
```

## `fc_filter()` {auto-animate="true"}

-   We can filter an existing flowchart specifying the logic in which the filter is to be applied:

```{r echo=TRUE, fig.width = 3, fig.height = 3, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized") |> 
  fc_draw()
```

::: {style="margin-top: -15%;"}
-   We can change again the `label`.
:::

## `fc_filter()` {auto-animate="true"}

-   We can filter an existing flowchart specifying the logic in which the filter is to be applied:

```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "800"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw()
```

::: {style="margin-top: -15%;"}
-   We can change again the `label`.

-   We can use `show_exc=TRUE` to show the excluded rows.
:::

## `fc_split()` 

-   We can split an existing flowchart according to the different values of a column:

```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "800"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw()
```

## `fc_split()` {auto-animate="true"}

-   We can split an existing flowchart according to the different values of a column:

```{r echo=TRUE, fig.width = 4, fig.height = 5, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_split(group) |> 
  fc_draw()
```

# Customize a flowchart

## Modify function arguments {auto-animate=true}

::: {style="font-size: 25px;"}
-   Some arguments common to `as_fc()`, `fc_filter()` and `fc_split()`, to customise the appearance of the boxes created at each step:

<table>
<tbody>
  <tr>
   <td style="text-align:left;"> `label=` </td>
   <td style="text-align:left;"> modify the label. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `text_pattern=` </td>
   <td style="text-align:left;"> modify the pattern of the text (e.g. `{label}\n {n} ({perc}%)`. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `round_digits=` </td>
   <td style="text-align:left;"> number of digits to round percentages (default is 2)
   </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `just=` </td>
   <td style="text-align:left;"> modify the justification for the text. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `text_color=` </td>
   <td style="text-align:left;"> modify the color of the text. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `text_fs=` </td>
   <td style="text-align:left;"> modify the font size of the text. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `text_fface=` </td>
   <td style="text-align:left;"> modify the font face of the text. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `text_ffamily=` </td>
   <td style="text-align:left;"> modify the font family of the text. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `text_padding=` </td>
   <td style="text-align:left;"> modify the text padding inside the box. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `bg_fill=` </td>
   <td style="text-align:left;"> modify the background color of the box. </td>
  </tr>
  <tr>
   <td style="text-align:left;"> `border_color=` </td>
   <td style="text-align:left;"> modify the border color of the box. </td>
  </tr>
</tbody>
</table>

:::

## Modify function arguments {auto-animate=true}

- There are a number of other arguments that you can check in the vignette:

<a href = "https://bruigtp.github.io/flowchart/articles/flowchart.html">
![](WWW/vignette.png)
</a>

## `fc_modify()` {auto-animate="true"}

-   We can modify the parameters of the created flowchart using the `fc_modify()` function:

```{r echo=TRUE, fig.width = 4, fig.height = 5, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw()
```

## `fc_modify()` {auto-animate="true"}

-   We can modify the parameters of the created flowchart using the `fc_modify()` function:

```{r echo=TRUE, eval=FALSE}
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_view("fc")
```

```{r echo=FALSE, fig.width = 4, fig.height = 5, out.width = "600"}
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_view("fc") |> 
  gt::gt() 
```

## `fc_modify()` {auto-animate="true"}

-   We can modify the parameters of the created flowchart using the `fc_modify()` function:

```{r echo=TRUE, fig.width = 7, fig.height = 5, out.width = "1500"}
#| classes: custom2
#| output-location: "slide"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_modify(
    ~ . |> 
      mutate(
        text = ifelse(id == 3, str_glue("- {sum(safo$inclusion_crit == 'Yes')} not met the inclusion criteria\n- {sum(safo$exclusion_crit == 'Yes')} met the exclusion criteria"), text),
        x = ifelse(id == 3, 0.75, x)
      )
  ) |> 
  fc_draw()
```

# Combine flowcharts

## `fc_merge()` {auto-animate="true"}

-   We can combine different flowcharts horizontally:

::: columns
::: {.column width="50%"}
```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "1000"}
#| classes: custom
fc1 <- safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(itt == "Yes", label = "Intention to treat (ITT)")

fc_draw(fc1)
```
:::

::: {.column width="50%"}
```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "800"}
#| classes: custom
fc2 <- safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(pp == "Yes", label = "Per protocol (PP)")

fc_draw(fc2)
```
:::
:::

## `fc_merge()` {auto-animate="true"}

-   We can combine different flowcharts horizontally:

```{r echo=TRUE, eval=FALSE}
list(fc1, fc2) |>
  fc_merge()
```

## `fc_merge()` {auto-animate="true"}

-   We can combine different flowcharts horizontally:

```{r echo=TRUE, fig.width = 5, fig.height = 4, fig.align = "center", out.width = "800"}
#| classes: custom2
list(fc1, fc2) |>
  fc_merge() |>
  fc_draw()
```

# Export flowcharts

## `fc_export()` {auto-animate="true"}

- We can export the drawn flowchart to some of the most popular graphic devices.

- These include both bitmap (`png`, `jpeg`, `tiff`, `bmp`) and vector (`svg`, `pdf`) formats.

```{r echo= TRUE, eval = FALSE}
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw() 
```

## `fc_export()` {auto-animate="true"}

- We can export the drawn flowchart to some of the most popular graphic devices.

- These include both bitmap (`png`, `jpeg`, `tiff`, `bmp`) and vector (`svg`, `pdf`) formats.

```{r echo=TRUE, eval = FALSE}
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw() |> 
  fc_export("flowchart.png")
```

## `fc_export()` {auto-animate="true"}

- We can export the drawn flowchart to some of the most popular graphic devices.

- These include both bitmap (`png`, `jpeg`, `tiff`, `bmp`) and vector (`svg`, `pdf`) formats.

```{r echo=TRUE, eval = FALSE}
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw() |> 
  fc_export("flowchart.png", width = 3000, height = 4000, res = 700)
```

- We can customize the size and resolution of the image to save.

# Hands-on examples

## Example 1 {auto-animate="true"}

-   We will try to build a flowchart for the complete participant flow of the SAFO study trial:

## Example 1 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_draw()
```

## Example 1 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_draw()
```

## Example 1 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 5, out.width = "600"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_split(group) |> 
  fc_draw()
```

## Example 1 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 7, out.width = "450"}
#| classes: custom
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_split(group) |> 
  fc_filter(itt == "Yes", label = "Included in ITT") |> 
  fc_draw()
```

## Example 1 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 7, out.width = "450"}
#| classes: custom4
#| output-location: "column"
safo |> 
  as_fc(label = "Patients assessed for eligibility") |>
  fc_filter(!is.na(group), label = "Randomized", show_exc = TRUE) |> 
  fc_split(group) |> 
  fc_filter(itt == "Yes", label = "Included in ITT") |> 
  fc_filter(pp == "Yes", label = "Included in PP") |> 
  fc_draw()
```

## Example 2 {auto-animate=true}

- Now let's try to customize it in order to exactly reproduce the original flowchart of the SAFO study published in Nature Medicine:

<center>
![](WWW/safo.png){width="40%"}
</center>

## Example 2 {auto-animate=true}

- First, we have to build the text in the exclude boxes:

```{r}
#| output-location: "slide"

#For the first exclude box:
label_exc <- paste(
  c(str_glue("{sum(safo$inclusion_crit == 'Yes' | safo$exclusion_crit == 'Yes' | safo$decline_part == 'Yes', na.rm = T)} excluded:"),
    map_chr(c("inclusion_crit", "decline_part", "exclusion_crit"), ~str_glue("{sum(safo[[.x]] == 'Yes', na.rm = TRUE)} {attr(safo[[.x]], 'label')}")),
    map_chr(4:15, ~str_glue(" -  {sum(safo[[.x]] == 'Yes')} {attr(safo[[.x]], 'label')}"))),
  collapse = "\n")

label_exc <- gsub("exclusion criteria", "exclusion criteria:", label_exc)
  
cat(label_exc)
```

## Example 2 {auto-animate=true}

- First, we have to build the text in the exclude boxes:

```{r}
#| output-location: "slide"

#For the PP exclude box (cloxacillin plus fosfomycin):
safo1 <- safo |> 
    filter(group == "cloxacillin plus fosfomycin", !is.na(reason_pp)) |> 
    mutate(reason_pp = droplevels(reason_pp))

label_exc1 <- paste(
    c(str_glue("{nrow(safo1)} excluded:"),
      map_chr(levels(safo1$reason_pp), ~str_glue(" -  {sum(safo1$reason_pp == .x)} {.x}"))),
    collapse = "\n")

label_exc1 <- str_replace_all(label_exc1, c("nosocomial" = "nosocomial\n", "treatment" = "treatment\n"))

cat(label_exc1)
```

## Example 2 {auto-animate=true}

- First, we have to build the text in the exclude boxes:

```{r}
#| output-location: "slide"

safo2 <- safo |> 
  filter(group == "cloxacillin alone", !is.na(reason_pp)) |> 
  mutate(reason_pp = droplevels(reason_pp))

label_exc2 <- paste(
  c(str_glue("{nrow(safo2)} excluded:"),
    map_chr(levels(safo2$reason_pp), ~str_glue(" -  {sum(safo2$reason_pp == .x)} {.x}"))),
  collapse = "\n")

label_exc2 <- str_replace_all(label_exc2, c("resistant" = "resistant\n", "blood" = "blood\n"))

cat(label_exc2)
```

## Example 2 {auto-animate="true"}

```{r}
#| output-location: "slide"
safo |> 
  as_fc(label = "patients assessed for eligibility", text_pattern = "{N} {label}") |>
  fc_draw()
```

## Example 2 {auto-animate="true"}

```{r}
#| output-location: "slide"
safo |> 
  as_fc(label = "patients assessed for eligibility", text_pattern = "{N} {label}") |>
  fc_filter(!is.na(group), label = "randomized", text_pattern = "{n} {label}", show_exc = TRUE, just_exc = "left", text_pattern_exc = "{label}", label_exc = label_exc, text_fs_exc = 7, offset_exc = 0.15) |> 
  fc_draw()
```

## Example 2 {auto-animate="true"}

```{r, fig.height = 6}
#| output-location: "slide"
safo |> 
  as_fc(label = "patients assessed for eligibility", text_pattern = "{N} {label}") |>
  fc_filter(!is.na(group), label = "randomized", text_pattern = "{n} {label}", show_exc = TRUE, just_exc = "left", text_pattern_exc = "{label}", label_exc = label_exc, text_fs_exc = 7, offset_exc = 0.15) |> 
  fc_split(group, text_pattern = "{n} assigned\n {label}") |> 
  fc_draw()
```

## Example 2 {auto-animate="true"}

```{r, fig.height = 7}
#| classes: custom3
#| output-location: "slide"

safo |> 
  as_fc(label = "patients assessed for eligibility", text_pattern = "{N} {label}") |>
  fc_filter(!is.na(group), label = "randomized", text_pattern = "{n} {label}", show_exc = TRUE, just_exc = "left", text_pattern_exc = "{label}", label_exc = label_exc, text_fs_exc = 7, offset_exc = 0.15) |> 
  fc_split(group, text_pattern = "{n} assigned\n {label}") |> 
  fc_filter(itt == "Yes", label = "included in intention-to-treat\n population", show_exc = TRUE, text_pattern = "{n} {label}", label_exc = "patient did not receive allocated\n treatment (withdrew consent)", text_pattern_exc = "{n} {label}", text_fs_exc = 7) |> 
  fc_draw()
```

## Example 2 {auto-animate="true"}

```{r, fig.height = 8}
#| classes: custom6
#| output-location: "slide"

safo |> 
  as_fc(label = "patients assessed for eligibility", text_pattern = "{N} {label}") |>
  fc_filter(!is.na(group), label = "randomized", text_pattern = "{n} {label}", show_exc = TRUE, just_exc = "left", text_pattern_exc = "{label}", label_exc = label_exc, text_fs_exc = 7, offset_exc = 0.15) |> 
  fc_split(group, text_pattern = "{n} assigned\n {label}") |> 
  fc_filter(itt == "Yes", label = "included in intention-to-treat\n population", show_exc = TRUE, text_pattern = "{n} {label}", label_exc = "patient did not receive allocated\n treatment (withdrew consent)", text_pattern_exc = "{n} {label}", text_fs_exc = 7) |> 
  fc_filter(pp == "Yes", label = "included in per-protocol\n population", show_exc = TRUE, just_exc = "left", text_pattern = "{n} {label}", text_fs_exc = 7) |> 
  fc_draw()
```

## Example 2 {auto-animate=true}

- Now let's use `fc_modify()` to change the existing texts for the ones we created:

```{r, fig.height = 9.2}
#| classes: custom7
#| output-location: "slide"

safo |> 
  as_fc(label = "patients assessed for eligibility", text_pattern = "{N} {label}") |> 
  fc_filter(!is.na(group), label = "randomized", text_pattern = "{n} {label}", show_exc = TRUE, just_exc = "left", text_pattern_exc = "{label}", label_exc = label_exc, text_fs_exc = 7, offset_exc = 0.15) |>
  fc_split(group, text_pattern = "{n} asssigned\n {label}") |> 
  fc_filter(itt == "Yes", label = "included in intention-to-treat\n population", show_exc = TRUE, text_pattern = "{n} {label}", label_exc = "patient did not receive allocated\n treatment (withdrew consent)", text_pattern_exc = "{n} {label}", text_fs_exc = 7) |>
  fc_filter(pp == "Yes", label = "included in per-protocol\n population", show_exc = TRUE, just_exc = "left", text_pattern = "{n} {label}", text_fs_exc = 7, offset_exc = c(0, -0.01)) |> 
  fc_modify(
    ~.x |> 
      filter(n != 0) |> 
      mutate(
        text = case_when(id == 11 ~ label_exc1, id == 13 ~ label_exc2, TRUE ~ text)
      )
  ) |> 
  fc_draw()
```

## Example 3 {auto-animate="true"}

-   Now, we will create a flowchart without any dataset using the `N=` argument:

## Example 3 {auto-animate="true"}

```{r echo=TRUE, fig.width = 3, fig.height = 3, out.width = "800"}
#| classes: custom
#| output-location: "column"
as_fc(N = 300, label = "Available patients") |> 
  fc_draw()
```

## Example 3 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 4, out.width = "800"}
#| classes: custom
#| output-location: "column"
as_fc(N = 300, label = "Available patients") |>
  fc_filter(N = 240, label = "Randomized patients", show_exc = TRUE) |> 
  fc_draw()
```

## Example 3 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 5, out.width = "600"}
#| classes: custom
#| output-location: "column"
as_fc(N = 300, label = "Available patients") |>
  fc_filter(N = 240, label = "Randomized patients", show_exc = TRUE) |> 
  fc_split(N = c(100, 80, 60), label = c("Group A", "Group B", "Group C")) |>
  fc_draw()
```

## Example 3 {auto-animate="true"}

```{r echo=TRUE, fig.width = 4, fig.height = 5.5, out.width = "600"}
#| classes: custom5
#| output-location: "column"
as_fc(N = 300, label = "Available patients") |>
  fc_filter(N = 240, label = "Randomized patients", show_exc = TRUE) |> 
  fc_split(N = c(100, 80, 60), label = c("Group A", "Group B", "Group C")) |>
  fc_filter(N = c(80, 75, 50), label = "Finished the study") |> 
  fc_draw()
```

# Conclusions

## Conclusions

::: {style="font-size: 35px"}
-   A clear and detailed reporting of the flow of participants in health research studies is required and recommended.

-   With this package, flowchart programming in R is made easier and accessible within the tidyverse workflow.

-   Flowchart reproducibility is assured.

-   As a limitation, we have not considered all possible scenarios and study designs, although is highly customizable.

-   As future developments:

    -   Define style themes using a function `fc_theme()`.

    -   Shiny application.
:::

## Conclusions

<br>

::: columns
::: {.column width="30%"}
<center>
![](WWW/douglas_altman.jpeg){width="80%"}
</center>
:::
::: {.column width="70%"}
<blockquote>
<p>
“Readers should not have to infer what was probably
done; they should be told explicitly.”
</p>
</blockquote>
<figcaption>
Douglas G. Altman
</figcaption>
:::
:::

## More information

-   You can visit the {flowchart} website: <a href = "https://bruigtp.github.io/flowchart/">https://bruigtp.github.io/flowchart/</a>

<center>

![](WWW/flowchart_website.png){width="75%"}
</center>

## Contact

IGTP Biostatistics Support and Research Unit:

::: columns
::: {.column width="20%"}
Pau Satorra
:::

::: {.column width="20%"}
João Carmezim
:::

::: {.column width="20%"}
Natàlia Pallarès
:::

::: {.column width="20%"}
Cristian Tebé
:::

::: {.column width="20%"}
Lucia Blanc
:::
:::
<br>
<center>
`r fontawesome::fa("github")` [github.com/bruigtp](https://github.com/bruigtp/)
</center>

<br>

::: columns
::: {.column width="50%"}
<center>
![](WWW/repos1.png)
</center>
:::
::: {.column width="50%"}
<center>
![](WWW/repos2.png)
</center>
:::
:::

## 

::: {style="position: absolute; left: 50%; top: 50%;-webkit-transform: translate(-50%, -50%); transform: translate(-50%, -50%);"}
<center>
![](WWW/logo.png){width="75%"}
<h2>Thank you!</h2>
</center>
:::
